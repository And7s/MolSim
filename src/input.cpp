// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsd/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "input.h"

// input_t
// 

const input_t::gravity_type& input_t::
gravity () const
{
  return this->gravity_.get ();
}

input_t::gravity_type& input_t::
gravity ()
{
  return this->gravity_.get ();
}

void input_t::
gravity (const gravity_type& x)
{
  this->gravity_.set (x);
}

const input_t::base_output_file_type& input_t::
base_output_file () const
{
  return this->base_output_file_.get ();
}

input_t::base_output_file_type& input_t::
base_output_file ()
{
  return this->base_output_file_.get ();
}

void input_t::
base_output_file (const base_output_file_type& x)
{
  this->base_output_file_.set (x);
}

void input_t::
base_output_file (::std::auto_ptr< base_output_file_type > x)
{
  this->base_output_file_.set (x);
}

const input_t::plot_vtk_file_type& input_t::
plot_vtk_file () const
{
  return this->plot_vtk_file_.get ();
}

input_t::plot_vtk_file_type& input_t::
plot_vtk_file ()
{
  return this->plot_vtk_file_.get ();
}

void input_t::
plot_vtk_file (const plot_vtk_file_type& x)
{
  this->plot_vtk_file_.set (x);
}

const input_t::xvf_data_file_type& input_t::
xvf_data_file () const
{
  return this->xvf_data_file_.get ();
}

input_t::xvf_data_file_type& input_t::
xvf_data_file ()
{
  return this->xvf_data_file_.get ();
}

void input_t::
xvf_data_file (const xvf_data_file_type& x)
{
  this->xvf_data_file_.set (x);
}

void input_t::
xvf_data_file (::std::auto_ptr< xvf_data_file_type > x)
{
  this->xvf_data_file_.set (x);
}

const input_t::plot_xvf_file_type& input_t::
plot_xvf_file () const
{
  return this->plot_xvf_file_.get ();
}

input_t::plot_xvf_file_type& input_t::
plot_xvf_file ()
{
  return this->plot_xvf_file_.get ();
}

void input_t::
plot_xvf_file (const plot_xvf_file_type& x)
{
  this->plot_xvf_file_.set (x);
}

const input_t::plot_csv_file_type& input_t::
plot_csv_file () const
{
  return this->plot_csv_file_.get ();
}

input_t::plot_csv_file_type& input_t::
plot_csv_file ()
{
  return this->plot_csv_file_.get ();
}

void input_t::
plot_csv_file (const plot_csv_file_type& x)
{
  this->plot_csv_file_.set (x);
}

const input_t::csv_bins_type& input_t::
csv_bins () const
{
  return this->csv_bins_.get ();
}

input_t::csv_bins_type& input_t::
csv_bins ()
{
  return this->csv_bins_.get ();
}

void input_t::
csv_bins (const csv_bins_type& x)
{
  this->csv_bins_.set (x);
}

const input_t::csv_iteration_type& input_t::
csv_iteration () const
{
  return this->csv_iteration_.get ();
}

input_t::csv_iteration_type& input_t::
csv_iteration ()
{
  return this->csv_iteration_.get ();
}

void input_t::
csv_iteration (const csv_iteration_type& x)
{
  this->csv_iteration_.set (x);
}

const input_t::use_thermostat_type& input_t::
use_thermostat () const
{
  return this->use_thermostat_.get ();
}

input_t::use_thermostat_type& input_t::
use_thermostat ()
{
  return this->use_thermostat_.get ();
}

void input_t::
use_thermostat (const use_thermostat_type& x)
{
  this->use_thermostat_.set (x);
}

const input_t::frequency_type& input_t::
frequency () const
{
  return this->frequency_.get ();
}

input_t::frequency_type& input_t::
frequency ()
{
  return this->frequency_.get ();
}

void input_t::
frequency (const frequency_type& x)
{
  this->frequency_.set (x);
}

const input_t::dimensions_type& input_t::
dimensions () const
{
  return this->dimensions_.get ();
}

input_t::dimensions_type& input_t::
dimensions ()
{
  return this->dimensions_.get ();
}

void input_t::
dimensions (const dimensions_type& x)
{
  this->dimensions_.set (x);
}

const input_t::start_time_type& input_t::
start_time () const
{
  return this->start_time_.get ();
}

input_t::start_time_type& input_t::
start_time ()
{
  return this->start_time_.get ();
}

void input_t::
start_time (const start_time_type& x)
{
  this->start_time_.set (x);
}

const input_t::tend_type& input_t::
tend () const
{
  return this->tend_.get ();
}

input_t::tend_type& input_t::
tend ()
{
  return this->tend_.get ();
}

void input_t::
tend (const tend_type& x)
{
  this->tend_.set (x);
}

const input_t::delta_t_type& input_t::
delta_t () const
{
  return this->delta_t_.get ();
}

input_t::delta_t_type& input_t::
delta_t ()
{
  return this->delta_t_.get ();
}

void input_t::
delta_t (const delta_t_type& x)
{
  this->delta_t_.set (x);
}

const input_t::sideForSeperation_type& input_t::
sideForSeperation () const
{
  return this->sideForSeperation_.get ();
}

input_t::sideForSeperation_type& input_t::
sideForSeperation ()
{
  return this->sideForSeperation_.get ();
}

void input_t::
sideForSeperation (const sideForSeperation_type& x)
{
  this->sideForSeperation_.set (x);
}

const input_t::input_file_type& input_t::
input_file () const
{
  return this->input_file_.get ();
}

input_t::input_file_type& input_t::
input_file ()
{
  return this->input_file_.get ();
}

void input_t::
input_file (const input_file_type& x)
{
  this->input_file_.set (x);
}

void input_t::
input_file (::std::auto_ptr< input_file_type > x)
{
  this->input_file_.set (x);
}

const input_t::cuboid_sequence& input_t::
cuboid () const
{
  return this->cuboid_;
}

input_t::cuboid_sequence& input_t::
cuboid ()
{
  return this->cuboid_;
}

void input_t::
cuboid (const cuboid_sequence& s)
{
  this->cuboid_ = s;
}

const input_t::sphere_sequence& input_t::
sphere () const
{
  return this->sphere_;
}

input_t::sphere_sequence& input_t::
sphere ()
{
  return this->sphere_;
}

void input_t::
sphere (const sphere_sequence& s)
{
  this->sphere_ = s;
}

const input_t::boundaryCondition_type& input_t::
boundaryCondition () const
{
  return this->boundaryCondition_.get ();
}

input_t::boundaryCondition_type& input_t::
boundaryCondition ()
{
  return this->boundaryCondition_.get ();
}

void input_t::
boundaryCondition (const boundaryCondition_type& x)
{
  this->boundaryCondition_.set (x);
}

void input_t::
boundaryCondition (::std::auto_ptr< boundaryCondition_type > x)
{
  this->boundaryCondition_.set (x);
}

const input_t::LinkedCellDomain_type& input_t::
LinkedCellDomain () const
{
  return this->LinkedCellDomain_.get ();
}

input_t::LinkedCellDomain_type& input_t::
LinkedCellDomain ()
{
  return this->LinkedCellDomain_.get ();
}

void input_t::
LinkedCellDomain (const LinkedCellDomain_type& x)
{
  this->LinkedCellDomain_.set (x);
}

void input_t::
LinkedCellDomain (::std::auto_ptr< LinkedCellDomain_type > x)
{
  this->LinkedCellDomain_.set (x);
}

const input_t::Thermostats_type& input_t::
Thermostats () const
{
  return this->Thermostats_.get ();
}

input_t::Thermostats_type& input_t::
Thermostats ()
{
  return this->Thermostats_.get ();
}

void input_t::
Thermostats (const Thermostats_type& x)
{
  this->Thermostats_.set (x);
}

void input_t::
Thermostats (::std::auto_ptr< Thermostats_type > x)
{
  this->Thermostats_.set (x);
}


// cuboid
// 

const cuboid::position_type& cuboid::
position () const
{
  return this->position_.get ();
}

cuboid::position_type& cuboid::
position ()
{
  return this->position_.get ();
}

void cuboid::
position (const position_type& x)
{
  this->position_.set (x);
}

void cuboid::
position (::std::auto_ptr< position_type > x)
{
  this->position_.set (x);
}

const cuboid::number_type& cuboid::
number () const
{
  return this->number_.get ();
}

cuboid::number_type& cuboid::
number ()
{
  return this->number_.get ();
}

void cuboid::
number (const number_type& x)
{
  this->number_.set (x);
}

void cuboid::
number (::std::auto_ptr< number_type > x)
{
  this->number_.set (x);
}

const cuboid::distance_type& cuboid::
distance () const
{
  return this->distance_.get ();
}

cuboid::distance_type& cuboid::
distance ()
{
  return this->distance_.get ();
}

void cuboid::
distance (const distance_type& x)
{
  this->distance_.set (x);
}

void cuboid::
distance (::std::auto_ptr< distance_type > x)
{
  this->distance_.set (x);
}

const cuboid::mass_type& cuboid::
mass () const
{
  return this->mass_.get ();
}

cuboid::mass_type& cuboid::
mass ()
{
  return this->mass_.get ();
}

void cuboid::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

void cuboid::
mass (::std::auto_ptr< mass_type > x)
{
  this->mass_.set (x);
}

const cuboid::epsilon_type& cuboid::
epsilon () const
{
  return this->epsilon_.get ();
}

cuboid::epsilon_type& cuboid::
epsilon ()
{
  return this->epsilon_.get ();
}

void cuboid::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

const cuboid::sigma_type& cuboid::
sigma () const
{
  return this->sigma_.get ();
}

cuboid::sigma_type& cuboid::
sigma ()
{
  return this->sigma_.get ();
}

void cuboid::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

const cuboid::type_type& cuboid::
type () const
{
  return this->type_.get ();
}

cuboid::type_type& cuboid::
type ()
{
  return this->type_.get ();
}

void cuboid::
type (const type_type& x)
{
  this->type_.set (x);
}

const cuboid::nature_type& cuboid::
nature () const
{
  return this->nature_.get ();
}

cuboid::nature_type& cuboid::
nature ()
{
  return this->nature_.get ();
}

void cuboid::
nature (const nature_type& x)
{
  this->nature_.set (x);
}

const cuboid::velocity_type& cuboid::
velocity () const
{
  return this->velocity_.get ();
}

cuboid::velocity_type& cuboid::
velocity ()
{
  return this->velocity_.get ();
}

void cuboid::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void cuboid::
velocity (::std::auto_ptr< velocity_type > x)
{
  this->velocity_.set (x);
}


// sphere
// 

const sphere::position_type& sphere::
position () const
{
  return this->position_.get ();
}

sphere::position_type& sphere::
position ()
{
  return this->position_.get ();
}

void sphere::
position (const position_type& x)
{
  this->position_.set (x);
}

void sphere::
position (::std::auto_ptr< position_type > x)
{
  this->position_.set (x);
}

const sphere::radius_type& sphere::
radius () const
{
  return this->radius_.get ();
}

sphere::radius_type& sphere::
radius ()
{
  return this->radius_.get ();
}

void sphere::
radius (const radius_type& x)
{
  this->radius_.set (x);
}

void sphere::
radius (::std::auto_ptr< radius_type > x)
{
  this->radius_.set (x);
}

const sphere::distance_type& sphere::
distance () const
{
  return this->distance_.get ();
}

sphere::distance_type& sphere::
distance ()
{
  return this->distance_.get ();
}

void sphere::
distance (const distance_type& x)
{
  this->distance_.set (x);
}

const sphere::mass_type& sphere::
mass () const
{
  return this->mass_.get ();
}

sphere::mass_type& sphere::
mass ()
{
  return this->mass_.get ();
}

void sphere::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

void sphere::
mass (::std::auto_ptr< mass_type > x)
{
  this->mass_.set (x);
}

const sphere::epsilon_type& sphere::
epsilon () const
{
  return this->epsilon_.get ();
}

sphere::epsilon_type& sphere::
epsilon ()
{
  return this->epsilon_.get ();
}

void sphere::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

const sphere::sigma_type& sphere::
sigma () const
{
  return this->sigma_.get ();
}

sphere::sigma_type& sphere::
sigma ()
{
  return this->sigma_.get ();
}

void sphere::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

const sphere::type_type& sphere::
type () const
{
  return this->type_.get ();
}

sphere::type_type& sphere::
type ()
{
  return this->type_.get ();
}

void sphere::
type (const type_type& x)
{
  this->type_.set (x);
}

const sphere::nature_type& sphere::
nature () const
{
  return this->nature_.get ();
}

sphere::nature_type& sphere::
nature ()
{
  return this->nature_.get ();
}

void sphere::
nature (const nature_type& x)
{
  this->nature_.set (x);
}

const sphere::velocity_type& sphere::
velocity () const
{
  return this->velocity_.get ();
}

sphere::velocity_type& sphere::
velocity ()
{
  return this->velocity_.get ();
}

void sphere::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void sphere::
velocity (::std::auto_ptr< velocity_type > x)
{
  this->velocity_.set (x);
}


// boundaryCondition
// 

const boundaryCondition::left_type& boundaryCondition::
left () const
{
  return this->left_.get ();
}

boundaryCondition::left_type& boundaryCondition::
left ()
{
  return this->left_.get ();
}

void boundaryCondition::
left (const left_type& x)
{
  this->left_.set (x);
}

void boundaryCondition::
left (::std::auto_ptr< left_type > x)
{
  this->left_.set (x);
}

const boundaryCondition::right_type& boundaryCondition::
right () const
{
  return this->right_.get ();
}

boundaryCondition::right_type& boundaryCondition::
right ()
{
  return this->right_.get ();
}

void boundaryCondition::
right (const right_type& x)
{
  this->right_.set (x);
}

void boundaryCondition::
right (::std::auto_ptr< right_type > x)
{
  this->right_.set (x);
}

const boundaryCondition::bottom_type& boundaryCondition::
bottom () const
{
  return this->bottom_.get ();
}

boundaryCondition::bottom_type& boundaryCondition::
bottom ()
{
  return this->bottom_.get ();
}

void boundaryCondition::
bottom (const bottom_type& x)
{
  this->bottom_.set (x);
}

void boundaryCondition::
bottom (::std::auto_ptr< bottom_type > x)
{
  this->bottom_.set (x);
}

const boundaryCondition::top_type& boundaryCondition::
top () const
{
  return this->top_.get ();
}

boundaryCondition::top_type& boundaryCondition::
top ()
{
  return this->top_.get ();
}

void boundaryCondition::
top (const top_type& x)
{
  this->top_.set (x);
}

void boundaryCondition::
top (::std::auto_ptr< top_type > x)
{
  this->top_.set (x);
}

const boundaryCondition::front_type& boundaryCondition::
front () const
{
  return this->front_.get ();
}

boundaryCondition::front_type& boundaryCondition::
front ()
{
  return this->front_.get ();
}

void boundaryCondition::
front (const front_type& x)
{
  this->front_.set (x);
}

void boundaryCondition::
front (::std::auto_ptr< front_type > x)
{
  this->front_.set (x);
}

const boundaryCondition::back_type& boundaryCondition::
back () const
{
  return this->back_.get ();
}

boundaryCondition::back_type& boundaryCondition::
back ()
{
  return this->back_.get ();
}

void boundaryCondition::
back (const back_type& x)
{
  this->back_.set (x);
}

void boundaryCondition::
back (::std::auto_ptr< back_type > x)
{
  this->back_.set (x);
}


// LinkedCellDomain
// 

const LinkedCellDomain::dimension_type& LinkedCellDomain::
dimension () const
{
  return this->dimension_.get ();
}

LinkedCellDomain::dimension_type& LinkedCellDomain::
dimension ()
{
  return this->dimension_.get ();
}

void LinkedCellDomain::
dimension (const dimension_type& x)
{
  this->dimension_.set (x);
}

void LinkedCellDomain::
dimension (::std::auto_ptr< dimension_type > x)
{
  this->dimension_.set (x);
}

const LinkedCellDomain::cutoff_type& LinkedCellDomain::
cutoff () const
{
  return this->cutoff_.get ();
}

LinkedCellDomain::cutoff_type& LinkedCellDomain::
cutoff ()
{
  return this->cutoff_.get ();
}

void LinkedCellDomain::
cutoff (const cutoff_type& x)
{
  this->cutoff_.set (x);
}

void LinkedCellDomain::
cutoff (::std::auto_ptr< cutoff_type > x)
{
  this->cutoff_.set (x);
}


// Thermostats
// 

const Thermostats::initial_temp_type& Thermostats::
initial_temp () const
{
  return this->initial_temp_.get ();
}

Thermostats::initial_temp_type& Thermostats::
initial_temp ()
{
  return this->initial_temp_.get ();
}

void Thermostats::
initial_temp (const initial_temp_type& x)
{
  this->initial_temp_.set (x);
}

const Thermostats::applied_after_type& Thermostats::
applied_after () const
{
  return this->applied_after_.get ();
}

Thermostats::applied_after_type& Thermostats::
applied_after ()
{
  return this->applied_after_.get ();
}

void Thermostats::
applied_after (const applied_after_type& x)
{
  this->applied_after_.set (x);
}

const Thermostats::delta_temp_type& Thermostats::
delta_temp () const
{
  return this->delta_temp_.get ();
}

Thermostats::delta_temp_type& Thermostats::
delta_temp ()
{
  return this->delta_temp_.get ();
}

void Thermostats::
delta_temp (const delta_temp_type& x)
{
  this->delta_temp_.set (x);
}

void Thermostats::
delta_temp (::std::auto_ptr< delta_temp_type > x)
{
  this->delta_temp_.set (x);
}

const Thermostats::changed_after_type& Thermostats::
changed_after () const
{
  return this->changed_after_.get ();
}

Thermostats::changed_after_type& Thermostats::
changed_after ()
{
  return this->changed_after_.get ();
}

void Thermostats::
changed_after (const changed_after_type& x)
{
  this->changed_after_.set (x);
}

const Thermostats::target_temp_type& Thermostats::
target_temp () const
{
  return this->target_temp_.get ();
}

Thermostats::target_temp_type& Thermostats::
target_temp ()
{
  return this->target_temp_.get ();
}

void Thermostats::
target_temp (const target_temp_type& x)
{
  this->target_temp_.set (x);
}


// vectorF
// 

const vectorF::x_type& vectorF::
x () const
{
  return this->x_.get ();
}

vectorF::x_type& vectorF::
x ()
{
  return this->x_.get ();
}

void vectorF::
x (const x_type& x)
{
  this->x_.set (x);
}

const vectorF::y_type& vectorF::
y () const
{
  return this->y_.get ();
}

vectorF::y_type& vectorF::
y ()
{
  return this->y_.get ();
}

void vectorF::
y (const y_type& x)
{
  this->y_.set (x);
}

const vectorF::z_type& vectorF::
z () const
{
  return this->z_.get ();
}

vectorF::z_type& vectorF::
z ()
{
  return this->z_.get ();
}

void vectorF::
z (const z_type& x)
{
  this->z_.set (x);
}


// vectorI
// 

const vectorI::x_type& vectorI::
x () const
{
  return this->x_.get ();
}

vectorI::x_type& vectorI::
x ()
{
  return this->x_.get ();
}

void vectorI::
x (const x_type& x)
{
  this->x_.set (x);
}

const vectorI::y_type& vectorI::
y () const
{
  return this->y_.get ();
}

vectorI::y_type& vectorI::
y ()
{
  return this->y_.get ();
}

void vectorI::
y (const y_type& x)
{
  this->y_.set (x);
}

const vectorI::z_type& vectorI::
z () const
{
  return this->z_.get ();
}

vectorI::z_type& vectorI::
z ()
{
  return this->z_.get ();
}

void vectorI::
z (const z_type& x)
{
  this->z_.set (x);
}


// nonNegativeFloat
// 


// positiveFloat
// 


// boundary_t
// 


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// input_t
//

input_t::
input_t (const gravity_type& gravity,
         const base_output_file_type& base_output_file,
         const plot_vtk_file_type& plot_vtk_file,
         const xvf_data_file_type& xvf_data_file,
         const plot_xvf_file_type& plot_xvf_file,
         const plot_csv_file_type& plot_csv_file,
         const csv_bins_type& csv_bins,
         const csv_iteration_type& csv_iteration,
         const use_thermostat_type& use_thermostat,
         const frequency_type& frequency,
         const dimensions_type& dimensions,
         const start_time_type& start_time,
         const tend_type& tend,
         const delta_t_type& delta_t,
         const sideForSeperation_type& sideForSeperation,
         const input_file_type& input_file,
         const boundaryCondition_type& boundaryCondition,
         const LinkedCellDomain_type& LinkedCellDomain,
         const Thermostats_type& Thermostats)
: ::xml_schema::type (),
  gravity_ (gravity, this),
  base_output_file_ (base_output_file, this),
  plot_vtk_file_ (plot_vtk_file, this),
  xvf_data_file_ (xvf_data_file, this),
  plot_xvf_file_ (plot_xvf_file, this),
  plot_csv_file_ (plot_csv_file, this),
  csv_bins_ (csv_bins, this),
  csv_iteration_ (csv_iteration, this),
  use_thermostat_ (use_thermostat, this),
  frequency_ (frequency, this),
  dimensions_ (dimensions, this),
  start_time_ (start_time, this),
  tend_ (tend, this),
  delta_t_ (delta_t, this),
  sideForSeperation_ (sideForSeperation, this),
  input_file_ (input_file, this),
  cuboid_ (this),
  sphere_ (this),
  boundaryCondition_ (boundaryCondition, this),
  LinkedCellDomain_ (LinkedCellDomain, this),
  Thermostats_ (Thermostats, this)
{
}

input_t::
input_t (const gravity_type& gravity,
         const base_output_file_type& base_output_file,
         const plot_vtk_file_type& plot_vtk_file,
         const xvf_data_file_type& xvf_data_file,
         const plot_xvf_file_type& plot_xvf_file,
         const plot_csv_file_type& plot_csv_file,
         const csv_bins_type& csv_bins,
         const csv_iteration_type& csv_iteration,
         const use_thermostat_type& use_thermostat,
         const frequency_type& frequency,
         const dimensions_type& dimensions,
         const start_time_type& start_time,
         const tend_type& tend,
         const delta_t_type& delta_t,
         const sideForSeperation_type& sideForSeperation,
         const input_file_type& input_file,
         ::std::auto_ptr< boundaryCondition_type >& boundaryCondition,
         ::std::auto_ptr< LinkedCellDomain_type >& LinkedCellDomain,
         ::std::auto_ptr< Thermostats_type >& Thermostats)
: ::xml_schema::type (),
  gravity_ (gravity, this),
  base_output_file_ (base_output_file, this),
  plot_vtk_file_ (plot_vtk_file, this),
  xvf_data_file_ (xvf_data_file, this),
  plot_xvf_file_ (plot_xvf_file, this),
  plot_csv_file_ (plot_csv_file, this),
  csv_bins_ (csv_bins, this),
  csv_iteration_ (csv_iteration, this),
  use_thermostat_ (use_thermostat, this),
  frequency_ (frequency, this),
  dimensions_ (dimensions, this),
  start_time_ (start_time, this),
  tend_ (tend, this),
  delta_t_ (delta_t, this),
  sideForSeperation_ (sideForSeperation, this),
  input_file_ (input_file, this),
  cuboid_ (this),
  sphere_ (this),
  boundaryCondition_ (boundaryCondition, this),
  LinkedCellDomain_ (LinkedCellDomain, this),
  Thermostats_ (Thermostats, this)
{
}

input_t::
input_t (const input_t& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  gravity_ (x.gravity_, f, this),
  base_output_file_ (x.base_output_file_, f, this),
  plot_vtk_file_ (x.plot_vtk_file_, f, this),
  xvf_data_file_ (x.xvf_data_file_, f, this),
  plot_xvf_file_ (x.plot_xvf_file_, f, this),
  plot_csv_file_ (x.plot_csv_file_, f, this),
  csv_bins_ (x.csv_bins_, f, this),
  csv_iteration_ (x.csv_iteration_, f, this),
  use_thermostat_ (x.use_thermostat_, f, this),
  frequency_ (x.frequency_, f, this),
  dimensions_ (x.dimensions_, f, this),
  start_time_ (x.start_time_, f, this),
  tend_ (x.tend_, f, this),
  delta_t_ (x.delta_t_, f, this),
  sideForSeperation_ (x.sideForSeperation_, f, this),
  input_file_ (x.input_file_, f, this),
  cuboid_ (x.cuboid_, f, this),
  sphere_ (x.sphere_, f, this),
  boundaryCondition_ (x.boundaryCondition_, f, this),
  LinkedCellDomain_ (x.LinkedCellDomain_, f, this),
  Thermostats_ (x.Thermostats_, f, this)
{
}

input_t::
input_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  gravity_ (this),
  base_output_file_ (this),
  plot_vtk_file_ (this),
  xvf_data_file_ (this),
  plot_xvf_file_ (this),
  plot_csv_file_ (this),
  csv_bins_ (this),
  csv_iteration_ (this),
  use_thermostat_ (this),
  frequency_ (this),
  dimensions_ (this),
  start_time_ (this),
  tend_ (this),
  delta_t_ (this),
  sideForSeperation_ (this),
  input_file_ (this),
  cuboid_ (this),
  sphere_ (this),
  boundaryCondition_ (this),
  LinkedCellDomain_ (this),
  Thermostats_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void input_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // gravity
    //
    if (n.name () == "gravity" && n.namespace_ ().empty ())
    {
      if (!gravity_.present ())
      {
        this->gravity_.set (gravity_traits::create (i, f, this));
        continue;
      }
    }

    // base_output_file
    //
    if (n.name () == "base_output_file" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< base_output_file_type > r (
        base_output_file_traits::create (i, f, this));

      if (!base_output_file_.present ())
      {
        this->base_output_file_.set (r);
        continue;
      }
    }

    // plot_vtk_file
    //
    if (n.name () == "plot_vtk_file" && n.namespace_ ().empty ())
    {
      if (!plot_vtk_file_.present ())
      {
        this->plot_vtk_file_.set (plot_vtk_file_traits::create (i, f, this));
        continue;
      }
    }

    // xvf_data_file
    //
    if (n.name () == "xvf_data_file" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< xvf_data_file_type > r (
        xvf_data_file_traits::create (i, f, this));

      if (!xvf_data_file_.present ())
      {
        this->xvf_data_file_.set (r);
        continue;
      }
    }

    // plot_xvf_file
    //
    if (n.name () == "plot_xvf_file" && n.namespace_ ().empty ())
    {
      if (!plot_xvf_file_.present ())
      {
        this->plot_xvf_file_.set (plot_xvf_file_traits::create (i, f, this));
        continue;
      }
    }

    // plot_csv_file
    //
    if (n.name () == "plot_csv_file" && n.namespace_ ().empty ())
    {
      if (!plot_csv_file_.present ())
      {
        this->plot_csv_file_.set (plot_csv_file_traits::create (i, f, this));
        continue;
      }
    }

    // csv_bins
    //
    if (n.name () == "csv_bins" && n.namespace_ ().empty ())
    {
      if (!csv_bins_.present ())
      {
        this->csv_bins_.set (csv_bins_traits::create (i, f, this));
        continue;
      }
    }

    // csv_iteration
    //
    if (n.name () == "csv_iteration" && n.namespace_ ().empty ())
    {
      if (!csv_iteration_.present ())
      {
        this->csv_iteration_.set (csv_iteration_traits::create (i, f, this));
        continue;
      }
    }

    // use_thermostat
    //
    if (n.name () == "use_thermostat" && n.namespace_ ().empty ())
    {
      if (!use_thermostat_.present ())
      {
        this->use_thermostat_.set (use_thermostat_traits::create (i, f, this));
        continue;
      }
    }

    // frequency
    //
    if (n.name () == "frequency" && n.namespace_ ().empty ())
    {
      if (!frequency_.present ())
      {
        this->frequency_.set (frequency_traits::create (i, f, this));
        continue;
      }
    }

    // dimensions
    //
    if (n.name () == "dimensions" && n.namespace_ ().empty ())
    {
      if (!dimensions_.present ())
      {
        this->dimensions_.set (dimensions_traits::create (i, f, this));
        continue;
      }
    }

    // start_time
    //
    if (n.name () == "start_time" && n.namespace_ ().empty ())
    {
      if (!start_time_.present ())
      {
        this->start_time_.set (start_time_traits::create (i, f, this));
        continue;
      }
    }

    // tend
    //
    if (n.name () == "tend" && n.namespace_ ().empty ())
    {
      if (!tend_.present ())
      {
        this->tend_.set (tend_traits::create (i, f, this));
        continue;
      }
    }

    // delta_t
    //
    if (n.name () == "delta_t" && n.namespace_ ().empty ())
    {
      if (!delta_t_.present ())
      {
        this->delta_t_.set (delta_t_traits::create (i, f, this));
        continue;
      }
    }

    // sideForSeperation
    //
    if (n.name () == "sideForSeperation" && n.namespace_ ().empty ())
    {
      if (!sideForSeperation_.present ())
      {
        this->sideForSeperation_.set (sideForSeperation_traits::create (i, f, this));
        continue;
      }
    }

    // input_file
    //
    if (n.name () == "input_file" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< input_file_type > r (
        input_file_traits::create (i, f, this));

      if (!input_file_.present ())
      {
        this->input_file_.set (r);
        continue;
      }
    }

    // cuboid
    //
    if (n.name () == "cuboid" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< cuboid_type > r (
        cuboid_traits::create (i, f, this));

      this->cuboid_.push_back (r);
      continue;
    }

    // sphere
    //
    if (n.name () == "sphere" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< sphere_type > r (
        sphere_traits::create (i, f, this));

      this->sphere_.push_back (r);
      continue;
    }

    // boundaryCondition
    //
    if (n.name () == "boundaryCondition" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< boundaryCondition_type > r (
        boundaryCondition_traits::create (i, f, this));

      if (!boundaryCondition_.present ())
      {
        this->boundaryCondition_.set (r);
        continue;
      }
    }

    // LinkedCellDomain
    //
    if (n.name () == "LinkedCellDomain" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< LinkedCellDomain_type > r (
        LinkedCellDomain_traits::create (i, f, this));

      if (!LinkedCellDomain_.present ())
      {
        this->LinkedCellDomain_.set (r);
        continue;
      }
    }

    // Thermostats
    //
    if (n.name () == "Thermostats" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Thermostats_type > r (
        Thermostats_traits::create (i, f, this));

      if (!Thermostats_.present ())
      {
        this->Thermostats_.set (r);
        continue;
      }
    }

    break;
  }

  if (!gravity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "gravity",
      "");
  }

  if (!base_output_file_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "base_output_file",
      "");
  }

  if (!plot_vtk_file_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "plot_vtk_file",
      "");
  }

  if (!xvf_data_file_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "xvf_data_file",
      "");
  }

  if (!plot_xvf_file_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "plot_xvf_file",
      "");
  }

  if (!plot_csv_file_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "plot_csv_file",
      "");
  }

  if (!csv_bins_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "csv_bins",
      "");
  }

  if (!csv_iteration_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "csv_iteration",
      "");
  }

  if (!use_thermostat_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "use_thermostat",
      "");
  }

  if (!frequency_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "frequency",
      "");
  }

  if (!dimensions_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "dimensions",
      "");
  }

  if (!start_time_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "start_time",
      "");
  }

  if (!tend_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "tend",
      "");
  }

  if (!delta_t_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "delta_t",
      "");
  }

  if (!sideForSeperation_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "sideForSeperation",
      "");
  }

  if (!input_file_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "input_file",
      "");
  }

  if (!boundaryCondition_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "boundaryCondition",
      "");
  }

  if (!LinkedCellDomain_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "LinkedCellDomain",
      "");
  }

  if (!Thermostats_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Thermostats",
      "");
  }
}

input_t* input_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class input_t (*this, f, c);
}

input_t& input_t::
operator= (const input_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->gravity_ = x.gravity_;
    this->base_output_file_ = x.base_output_file_;
    this->plot_vtk_file_ = x.plot_vtk_file_;
    this->xvf_data_file_ = x.xvf_data_file_;
    this->plot_xvf_file_ = x.plot_xvf_file_;
    this->plot_csv_file_ = x.plot_csv_file_;
    this->csv_bins_ = x.csv_bins_;
    this->csv_iteration_ = x.csv_iteration_;
    this->use_thermostat_ = x.use_thermostat_;
    this->frequency_ = x.frequency_;
    this->dimensions_ = x.dimensions_;
    this->start_time_ = x.start_time_;
    this->tend_ = x.tend_;
    this->delta_t_ = x.delta_t_;
    this->sideForSeperation_ = x.sideForSeperation_;
    this->input_file_ = x.input_file_;
    this->cuboid_ = x.cuboid_;
    this->sphere_ = x.sphere_;
    this->boundaryCondition_ = x.boundaryCondition_;
    this->LinkedCellDomain_ = x.LinkedCellDomain_;
    this->Thermostats_ = x.Thermostats_;
  }

  return *this;
}

input_t::
~input_t ()
{
}

// cuboid
//

cuboid::
cuboid (const position_type& position,
        const number_type& number,
        const distance_type& distance,
        const mass_type& mass,
        const epsilon_type& epsilon,
        const sigma_type& sigma,
        const type_type& type,
        const nature_type& nature,
        const velocity_type& velocity)
: ::xml_schema::type (),
  position_ (position, this),
  number_ (number, this),
  distance_ (distance, this),
  mass_ (mass, this),
  epsilon_ (epsilon, this),
  sigma_ (sigma, this),
  type_ (type, this),
  nature_ (nature, this),
  velocity_ (velocity, this)
{
}

cuboid::
cuboid (::std::auto_ptr< position_type >& position,
        ::std::auto_ptr< number_type >& number,
        const distance_type& distance,
        const mass_type& mass,
        const epsilon_type& epsilon,
        const sigma_type& sigma,
        const type_type& type,
        const nature_type& nature,
        ::std::auto_ptr< velocity_type >& velocity)
: ::xml_schema::type (),
  position_ (position, this),
  number_ (number, this),
  distance_ (distance, this),
  mass_ (mass, this),
  epsilon_ (epsilon, this),
  sigma_ (sigma, this),
  type_ (type, this),
  nature_ (nature, this),
  velocity_ (velocity, this)
{
}

cuboid::
cuboid (const cuboid& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  position_ (x.position_, f, this),
  number_ (x.number_, f, this),
  distance_ (x.distance_, f, this),
  mass_ (x.mass_, f, this),
  epsilon_ (x.epsilon_, f, this),
  sigma_ (x.sigma_, f, this),
  type_ (x.type_, f, this),
  nature_ (x.nature_, f, this),
  velocity_ (x.velocity_, f, this)
{
}

cuboid::
cuboid (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  position_ (this),
  number_ (this),
  distance_ (this),
  mass_ (this),
  epsilon_ (this),
  sigma_ (this),
  type_ (this),
  nature_ (this),
  velocity_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void cuboid::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // position
    //
    if (n.name () == "position" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< position_type > r (
        position_traits::create (i, f, this));

      if (!position_.present ())
      {
        this->position_.set (r);
        continue;
      }
    }

    // number
    //
    if (n.name () == "number" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< number_type > r (
        number_traits::create (i, f, this));

      if (!number_.present ())
      {
        this->number_.set (r);
        continue;
      }
    }

    // distance
    //
    if (n.name () == "distance" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< distance_type > r (
        distance_traits::create (i, f, this));

      if (!distance_.present ())
      {
        this->distance_.set (r);
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< mass_type > r (
        mass_traits::create (i, f, this));

      if (!mass_.present ())
      {
        this->mass_.set (r);
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!epsilon_.present ())
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // sigma
    //
    if (n.name () == "sigma" && n.namespace_ ().empty ())
    {
      if (!sigma_.present ())
      {
        this->sigma_.set (sigma_traits::create (i, f, this));
        continue;
      }
    }

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      if (!type_.present ())
      {
        this->type_.set (type_traits::create (i, f, this));
        continue;
      }
    }

    // nature
    //
    if (n.name () == "nature" && n.namespace_ ().empty ())
    {
      if (!nature_.present ())
      {
        this->nature_.set (nature_traits::create (i, f, this));
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (r);
        continue;
      }
    }

    break;
  }

  if (!position_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "position",
      "");
  }

  if (!number_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "number",
      "");
  }

  if (!distance_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "distance",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }

  if (!epsilon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "epsilon",
      "");
  }

  if (!sigma_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "sigma",
      "");
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }

  if (!nature_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "nature",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }
}

cuboid* cuboid::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class cuboid (*this, f, c);
}

cuboid& cuboid::
operator= (const cuboid& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->position_ = x.position_;
    this->number_ = x.number_;
    this->distance_ = x.distance_;
    this->mass_ = x.mass_;
    this->epsilon_ = x.epsilon_;
    this->sigma_ = x.sigma_;
    this->type_ = x.type_;
    this->nature_ = x.nature_;
    this->velocity_ = x.velocity_;
  }

  return *this;
}

cuboid::
~cuboid ()
{
}

// sphere
//

sphere::
sphere (const position_type& position,
        const radius_type& radius,
        const distance_type& distance,
        const mass_type& mass,
        const epsilon_type& epsilon,
        const sigma_type& sigma,
        const type_type& type,
        const nature_type& nature,
        const velocity_type& velocity)
: ::xml_schema::type (),
  position_ (position, this),
  radius_ (radius, this),
  distance_ (distance, this),
  mass_ (mass, this),
  epsilon_ (epsilon, this),
  sigma_ (sigma, this),
  type_ (type, this),
  nature_ (nature, this),
  velocity_ (velocity, this)
{
}

sphere::
sphere (::std::auto_ptr< position_type >& position,
        const radius_type& radius,
        const distance_type& distance,
        const mass_type& mass,
        const epsilon_type& epsilon,
        const sigma_type& sigma,
        const type_type& type,
        const nature_type& nature,
        ::std::auto_ptr< velocity_type >& velocity)
: ::xml_schema::type (),
  position_ (position, this),
  radius_ (radius, this),
  distance_ (distance, this),
  mass_ (mass, this),
  epsilon_ (epsilon, this),
  sigma_ (sigma, this),
  type_ (type, this),
  nature_ (nature, this),
  velocity_ (velocity, this)
{
}

sphere::
sphere (const sphere& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  position_ (x.position_, f, this),
  radius_ (x.radius_, f, this),
  distance_ (x.distance_, f, this),
  mass_ (x.mass_, f, this),
  epsilon_ (x.epsilon_, f, this),
  sigma_ (x.sigma_, f, this),
  type_ (x.type_, f, this),
  nature_ (x.nature_, f, this),
  velocity_ (x.velocity_, f, this)
{
}

sphere::
sphere (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  position_ (this),
  radius_ (this),
  distance_ (this),
  mass_ (this),
  epsilon_ (this),
  sigma_ (this),
  type_ (this),
  nature_ (this),
  velocity_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void sphere::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // position
    //
    if (n.name () == "position" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< position_type > r (
        position_traits::create (i, f, this));

      if (!position_.present ())
      {
        this->position_.set (r);
        continue;
      }
    }

    // radius
    //
    if (n.name () == "radius" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< radius_type > r (
        radius_traits::create (i, f, this));

      if (!radius_.present ())
      {
        this->radius_.set (r);
        continue;
      }
    }

    // distance
    //
    if (n.name () == "distance" && n.namespace_ ().empty ())
    {
      if (!distance_.present ())
      {
        this->distance_.set (distance_traits::create (i, f, this));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< mass_type > r (
        mass_traits::create (i, f, this));

      if (!mass_.present ())
      {
        this->mass_.set (r);
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!epsilon_.present ())
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // sigma
    //
    if (n.name () == "sigma" && n.namespace_ ().empty ())
    {
      if (!sigma_.present ())
      {
        this->sigma_.set (sigma_traits::create (i, f, this));
        continue;
      }
    }

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      if (!type_.present ())
      {
        this->type_.set (type_traits::create (i, f, this));
        continue;
      }
    }

    // nature
    //
    if (n.name () == "nature" && n.namespace_ ().empty ())
    {
      if (!nature_.present ())
      {
        this->nature_.set (nature_traits::create (i, f, this));
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (r);
        continue;
      }
    }

    break;
  }

  if (!position_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "position",
      "");
  }

  if (!radius_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "radius",
      "");
  }

  if (!distance_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "distance",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }

  if (!epsilon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "epsilon",
      "");
  }

  if (!sigma_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "sigma",
      "");
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }

  if (!nature_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "nature",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }
}

sphere* sphere::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class sphere (*this, f, c);
}

sphere& sphere::
operator= (const sphere& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->position_ = x.position_;
    this->radius_ = x.radius_;
    this->distance_ = x.distance_;
    this->mass_ = x.mass_;
    this->epsilon_ = x.epsilon_;
    this->sigma_ = x.sigma_;
    this->type_ = x.type_;
    this->nature_ = x.nature_;
    this->velocity_ = x.velocity_;
  }

  return *this;
}

sphere::
~sphere ()
{
}

// boundaryCondition
//

boundaryCondition::
boundaryCondition (const left_type& left,
                   const right_type& right,
                   const bottom_type& bottom,
                   const top_type& top,
                   const front_type& front,
                   const back_type& back)
: ::xml_schema::type (),
  left_ (left, this),
  right_ (right, this),
  bottom_ (bottom, this),
  top_ (top, this),
  front_ (front, this),
  back_ (back, this)
{
}

boundaryCondition::
boundaryCondition (const boundaryCondition& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  left_ (x.left_, f, this),
  right_ (x.right_, f, this),
  bottom_ (x.bottom_, f, this),
  top_ (x.top_, f, this),
  front_ (x.front_, f, this),
  back_ (x.back_, f, this)
{
}

boundaryCondition::
boundaryCondition (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  left_ (this),
  right_ (this),
  bottom_ (this),
  top_ (this),
  front_ (this),
  back_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void boundaryCondition::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // left
    //
    if (n.name () == "left" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< left_type > r (
        left_traits::create (i, f, this));

      if (!left_.present ())
      {
        this->left_.set (r);
        continue;
      }
    }

    // right
    //
    if (n.name () == "right" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< right_type > r (
        right_traits::create (i, f, this));

      if (!right_.present ())
      {
        this->right_.set (r);
        continue;
      }
    }

    // bottom
    //
    if (n.name () == "bottom" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< bottom_type > r (
        bottom_traits::create (i, f, this));

      if (!bottom_.present ())
      {
        this->bottom_.set (r);
        continue;
      }
    }

    // top
    //
    if (n.name () == "top" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< top_type > r (
        top_traits::create (i, f, this));

      if (!top_.present ())
      {
        this->top_.set (r);
        continue;
      }
    }

    // front
    //
    if (n.name () == "front" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< front_type > r (
        front_traits::create (i, f, this));

      if (!front_.present ())
      {
        this->front_.set (r);
        continue;
      }
    }

    // back
    //
    if (n.name () == "back" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< back_type > r (
        back_traits::create (i, f, this));

      if (!back_.present ())
      {
        this->back_.set (r);
        continue;
      }
    }

    break;
  }

  if (!left_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "left",
      "");
  }

  if (!right_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "right",
      "");
  }

  if (!bottom_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "bottom",
      "");
  }

  if (!top_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "top",
      "");
  }

  if (!front_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "front",
      "");
  }

  if (!back_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "back",
      "");
  }
}

boundaryCondition* boundaryCondition::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class boundaryCondition (*this, f, c);
}

boundaryCondition& boundaryCondition::
operator= (const boundaryCondition& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->left_ = x.left_;
    this->right_ = x.right_;
    this->bottom_ = x.bottom_;
    this->top_ = x.top_;
    this->front_ = x.front_;
    this->back_ = x.back_;
  }

  return *this;
}

boundaryCondition::
~boundaryCondition ()
{
}

// LinkedCellDomain
//

LinkedCellDomain::
LinkedCellDomain (const dimension_type& dimension,
                  const cutoff_type& cutoff)
: ::xml_schema::type (),
  dimension_ (dimension, this),
  cutoff_ (cutoff, this)
{
}

LinkedCellDomain::
LinkedCellDomain (::std::auto_ptr< dimension_type >& dimension,
                  const cutoff_type& cutoff)
: ::xml_schema::type (),
  dimension_ (dimension, this),
  cutoff_ (cutoff, this)
{
}

LinkedCellDomain::
LinkedCellDomain (const LinkedCellDomain& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  dimension_ (x.dimension_, f, this),
  cutoff_ (x.cutoff_, f, this)
{
}

LinkedCellDomain::
LinkedCellDomain (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  dimension_ (this),
  cutoff_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void LinkedCellDomain::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // dimension
    //
    if (n.name () == "dimension" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< dimension_type > r (
        dimension_traits::create (i, f, this));

      if (!dimension_.present ())
      {
        this->dimension_.set (r);
        continue;
      }
    }

    // cutoff
    //
    if (n.name () == "cutoff" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< cutoff_type > r (
        cutoff_traits::create (i, f, this));

      if (!cutoff_.present ())
      {
        this->cutoff_.set (r);
        continue;
      }
    }

    break;
  }

  if (!dimension_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "dimension",
      "");
  }

  if (!cutoff_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "cutoff",
      "");
  }
}

LinkedCellDomain* LinkedCellDomain::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class LinkedCellDomain (*this, f, c);
}

LinkedCellDomain& LinkedCellDomain::
operator= (const LinkedCellDomain& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->dimension_ = x.dimension_;
    this->cutoff_ = x.cutoff_;
  }

  return *this;
}

LinkedCellDomain::
~LinkedCellDomain ()
{
}

// Thermostats
//

Thermostats::
Thermostats (const initial_temp_type& initial_temp,
             const applied_after_type& applied_after,
             const delta_temp_type& delta_temp,
             const changed_after_type& changed_after,
             const target_temp_type& target_temp)
: ::xml_schema::type (),
  initial_temp_ (initial_temp, this),
  applied_after_ (applied_after, this),
  delta_temp_ (delta_temp, this),
  changed_after_ (changed_after, this),
  target_temp_ (target_temp, this)
{
}

Thermostats::
Thermostats (const Thermostats& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  initial_temp_ (x.initial_temp_, f, this),
  applied_after_ (x.applied_after_, f, this),
  delta_temp_ (x.delta_temp_, f, this),
  changed_after_ (x.changed_after_, f, this),
  target_temp_ (x.target_temp_, f, this)
{
}

Thermostats::
Thermostats (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  initial_temp_ (this),
  applied_after_ (this),
  delta_temp_ (this),
  changed_after_ (this),
  target_temp_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void Thermostats::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // initial_temp
    //
    if (n.name () == "initial_temp" && n.namespace_ ().empty ())
    {
      if (!initial_temp_.present ())
      {
        this->initial_temp_.set (initial_temp_traits::create (i, f, this));
        continue;
      }
    }

    // applied_after
    //
    if (n.name () == "applied_after" && n.namespace_ ().empty ())
    {
      if (!applied_after_.present ())
      {
        this->applied_after_.set (applied_after_traits::create (i, f, this));
        continue;
      }
    }

    // delta_temp
    //
    if (n.name () == "delta_temp" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< delta_temp_type > r (
        delta_temp_traits::create (i, f, this));

      if (!delta_temp_.present ())
      {
        this->delta_temp_.set (r);
        continue;
      }
    }

    // changed_after
    //
    if (n.name () == "changed_after" && n.namespace_ ().empty ())
    {
      if (!changed_after_.present ())
      {
        this->changed_after_.set (changed_after_traits::create (i, f, this));
        continue;
      }
    }

    // target_temp
    //
    if (n.name () == "target_temp" && n.namespace_ ().empty ())
    {
      if (!target_temp_.present ())
      {
        this->target_temp_.set (target_temp_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!initial_temp_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "initial_temp",
      "");
  }

  if (!applied_after_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "applied_after",
      "");
  }

  if (!delta_temp_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "delta_temp",
      "");
  }

  if (!changed_after_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "changed_after",
      "");
  }

  if (!target_temp_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "target_temp",
      "");
  }
}

Thermostats* Thermostats::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class Thermostats (*this, f, c);
}

Thermostats& Thermostats::
operator= (const Thermostats& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->initial_temp_ = x.initial_temp_;
    this->applied_after_ = x.applied_after_;
    this->delta_temp_ = x.delta_temp_;
    this->changed_after_ = x.changed_after_;
    this->target_temp_ = x.target_temp_;
  }

  return *this;
}

Thermostats::
~Thermostats ()
{
}

// vectorF
//

vectorF::
vectorF (const x_type& x,
         const y_type& y,
         const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

vectorF::
vectorF (const vectorF& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

vectorF::
vectorF (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void vectorF::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

vectorF* vectorF::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class vectorF (*this, f, c);
}

vectorF& vectorF::
operator= (const vectorF& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

vectorF::
~vectorF ()
{
}

// vectorI
//

vectorI::
vectorI (const x_type& x,
         const y_type& y,
         const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

vectorI::
vectorI (const vectorI& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

vectorI::
vectorI (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void vectorI::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

vectorI* vectorI::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class vectorI (*this, f, c);
}

vectorI& vectorI::
operator= (const vectorI& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

vectorI::
~vectorI ()
{
}

// nonNegativeFloat
//

nonNegativeFloat::
nonNegativeFloat (const ::xml_schema::float_& _xsd_float__base)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (_xsd_float__base)
{
}

nonNegativeFloat::
nonNegativeFloat (const nonNegativeFloat& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (x, f, c)
{
}

nonNegativeFloat::
nonNegativeFloat (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (e, f, c)
{
}

nonNegativeFloat::
nonNegativeFloat (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (a, f, c)
{
}

nonNegativeFloat::
nonNegativeFloat (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (s, e, f, c)
{
}

nonNegativeFloat* nonNegativeFloat::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class nonNegativeFloat (*this, f, c);
}

nonNegativeFloat::
~nonNegativeFloat ()
{
}

// positiveFloat
//

positiveFloat::
positiveFloat (const ::xml_schema::float_& _xsd_float__base)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (_xsd_float__base)
{
}

positiveFloat::
positiveFloat (const positiveFloat& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (x, f, c)
{
}

positiveFloat::
positiveFloat (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (e, f, c)
{
}

positiveFloat::
positiveFloat (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (a, f, c)
{
}

positiveFloat::
positiveFloat (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (s, e, f, c)
{
}

positiveFloat* positiveFloat::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class positiveFloat (*this, f, c);
}

positiveFloat::
~positiveFloat ()
{
}

// boundary_t
//

boundary_t::
boundary_t (const ::xml_schema::integer& _xsd_integer_base)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (_xsd_integer_base)
{
}

boundary_t::
boundary_t (const boundary_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (x, f, c)
{
}

boundary_t::
boundary_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (e, f, c)
{
}

boundary_t::
boundary_t (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (a, f, c)
{
}

boundary_t::
boundary_t (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (s, e, f, c)
{
}

boundary_t* boundary_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class boundary_t (*this, f, c);
}

boundary_t::
~boundary_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::input_t >
input (const ::std::string& u,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::input_t > r (
    ::input (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::input_t >
input (const ::std::string& u,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::input_t > r (
    ::input (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::input_t >
input (const ::std::string& u,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::input_t > r (
    ::input (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::input_t >
input (::std::istream& is,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::input (isrc, f, p);
}

::std::auto_ptr< ::input_t >
input (::std::istream& is,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::input (isrc, h, f, p);
}

::std::auto_ptr< ::input_t >
input (::std::istream& is,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::input (isrc, h, f, p);
}

::std::auto_ptr< ::input_t >
input (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::input (isrc, f, p);
}

::std::auto_ptr< ::input_t >
input (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::input (isrc, h, f, p);
}

::std::auto_ptr< ::input_t >
input (::std::istream& is,
       const ::std::string& sid,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::input (isrc, h, f, p);
}

::std::auto_ptr< ::input_t >
input (::xercesc::InputSource& i,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::input_t > r (
    ::input (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::input_t >
input (::xercesc::InputSource& i,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::input_t > r (
    ::input (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::input_t >
input (::xercesc::InputSource& i,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::input_t > r (
    ::input (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::input_t >
input (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::input_t > r (
      ::input (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "input" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::input_t > r (
      ::xsd::cxx::tree::traits< ::input_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "input",
    "");
}

::std::auto_ptr< ::input_t >
input (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "input" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::input_t > r (
      ::xsd::cxx::tree::traits< ::input_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "input",
    "");
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsd/cxx/post.hxx>

