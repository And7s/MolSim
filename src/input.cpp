// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsd/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "input.h"

// input_t
// 

const input_t::base_output_file_type& input_t::
base_output_file () const
{
  return this->base_output_file_.get ();
}

input_t::base_output_file_type& input_t::
base_output_file ()
{
  return this->base_output_file_.get ();
}

void input_t::
base_output_file (const base_output_file_type& x)
{
  this->base_output_file_.set (x);
}

void input_t::
base_output_file (::std::auto_ptr< base_output_file_type > x)
{
  this->base_output_file_.set (x);
}

const input_t::frequency_type& input_t::
frequency () const
{
  return this->frequency_.get ();
}

input_t::frequency_type& input_t::
frequency ()
{
  return this->frequency_.get ();
}

void input_t::
frequency (const frequency_type& x)
{
  this->frequency_.set (x);
}

const input_t::start_time_type& input_t::
start_time () const
{
  return this->start_time_.get ();
}

input_t::start_time_type& input_t::
start_time ()
{
  return this->start_time_.get ();
}

void input_t::
start_time (const start_time_type& x)
{
  this->start_time_.set (x);
}

const input_t::tend_type& input_t::
tend () const
{
  return this->tend_.get ();
}

input_t::tend_type& input_t::
tend ()
{
  return this->tend_.get ();
}

void input_t::
tend (const tend_type& x)
{
  this->tend_.set (x);
}

const input_t::delta_t_type& input_t::
delta_t () const
{
  return this->delta_t_.get ();
}

input_t::delta_t_type& input_t::
delta_t ()
{
  return this->delta_t_.get ();
}

void input_t::
delta_t (const delta_t_type& x)
{
  this->delta_t_.set (x);
}

const input_t::input_file_type& input_t::
input_file () const
{
  return this->input_file_.get ();
}

input_t::input_file_type& input_t::
input_file ()
{
  return this->input_file_.get ();
}

void input_t::
input_file (const input_file_type& x)
{
  this->input_file_.set (x);
}

void input_t::
input_file (::std::auto_ptr< input_file_type > x)
{
  this->input_file_.set (x);
}

const input_t::cuboid_sequence& input_t::
cuboid () const
{
  return this->cuboid_;
}

input_t::cuboid_sequence& input_t::
cuboid ()
{
  return this->cuboid_;
}

void input_t::
cuboid (const cuboid_sequence& s)
{
  this->cuboid_ = s;
}


// cuboid
// 

const cuboid::position_type& cuboid::
position () const
{
  return this->position_.get ();
}

cuboid::position_type& cuboid::
position ()
{
  return this->position_.get ();
}

void cuboid::
position (const position_type& x)
{
  this->position_.set (x);
}

void cuboid::
position (::std::auto_ptr< position_type > x)
{
  this->position_.set (x);
}

const cuboid::number_type& cuboid::
number () const
{
  return this->number_.get ();
}

cuboid::number_type& cuboid::
number ()
{
  return this->number_.get ();
}

void cuboid::
number (const number_type& x)
{
  this->number_.set (x);
}

void cuboid::
number (::std::auto_ptr< number_type > x)
{
  this->number_.set (x);
}

const cuboid::distance_type& cuboid::
distance () const
{
  return this->distance_.get ();
}

cuboid::distance_type& cuboid::
distance ()
{
  return this->distance_.get ();
}

void cuboid::
distance (const distance_type& x)
{
  this->distance_.set (x);
}

const cuboid::mass_type& cuboid::
mass () const
{
  return this->mass_.get ();
}

cuboid::mass_type& cuboid::
mass ()
{
  return this->mass_.get ();
}

void cuboid::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

const cuboid::velocity_type& cuboid::
velocity () const
{
  return this->velocity_.get ();
}

cuboid::velocity_type& cuboid::
velocity ()
{
  return this->velocity_.get ();
}

void cuboid::
velocity (const velocity_type& x)
{
  this->velocity_.set (x);
}

void cuboid::
velocity (::std::auto_ptr< velocity_type > x)
{
  this->velocity_.set (x);
}


// vectorF
// 

const vectorF::x_type& vectorF::
x () const
{
  return this->x_.get ();
}

vectorF::x_type& vectorF::
x ()
{
  return this->x_.get ();
}

void vectorF::
x (const x_type& x)
{
  this->x_.set (x);
}

const vectorF::y_type& vectorF::
y () const
{
  return this->y_.get ();
}

vectorF::y_type& vectorF::
y ()
{
  return this->y_.get ();
}

void vectorF::
y (const y_type& x)
{
  this->y_.set (x);
}

const vectorF::z_type& vectorF::
z () const
{
  return this->z_.get ();
}

vectorF::z_type& vectorF::
z ()
{
  return this->z_.get ();
}

void vectorF::
z (const z_type& x)
{
  this->z_.set (x);
}


// vectorI
// 

const vectorI::x_type& vectorI::
x () const
{
  return this->x_.get ();
}

vectorI::x_type& vectorI::
x ()
{
  return this->x_.get ();
}

void vectorI::
x (const x_type& x)
{
  this->x_.set (x);
}

const vectorI::y_type& vectorI::
y () const
{
  return this->y_.get ();
}

vectorI::y_type& vectorI::
y ()
{
  return this->y_.get ();
}

void vectorI::
y (const y_type& x)
{
  this->y_.set (x);
}

const vectorI::z_type& vectorI::
z () const
{
  return this->z_.get ();
}

vectorI::z_type& vectorI::
z ()
{
  return this->z_.get ();
}

void vectorI::
z (const z_type& x)
{
  this->z_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// input_t
//

input_t::
input_t (const base_output_file_type& base_output_file,
         const frequency_type& frequency,
         const start_time_type& start_time,
         const tend_type& tend,
         const delta_t_type& delta_t,
         const input_file_type& input_file)
: ::xml_schema::type (),
  base_output_file_ (base_output_file, this),
  frequency_ (frequency, this),
  start_time_ (start_time, this),
  tend_ (tend, this),
  delta_t_ (delta_t, this),
  input_file_ (input_file, this),
  cuboid_ (this)
{
}

input_t::
input_t (const input_t& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  base_output_file_ (x.base_output_file_, f, this),
  frequency_ (x.frequency_, f, this),
  start_time_ (x.start_time_, f, this),
  tend_ (x.tend_, f, this),
  delta_t_ (x.delta_t_, f, this),
  input_file_ (x.input_file_, f, this),
  cuboid_ (x.cuboid_, f, this)
{
}

input_t::
input_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  base_output_file_ (this),
  frequency_ (this),
  start_time_ (this),
  tend_ (this),
  delta_t_ (this),
  input_file_ (this),
  cuboid_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void input_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // base_output_file
    //
    if (n.name () == "base_output_file" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< base_output_file_type > r (
        base_output_file_traits::create (i, f, this));

      if (!base_output_file_.present ())
      {
        this->base_output_file_.set (r);
        continue;
      }
    }

    // frequency
    //
    if (n.name () == "frequency" && n.namespace_ ().empty ())
    {
      if (!frequency_.present ())
      {
        this->frequency_.set (frequency_traits::create (i, f, this));
        continue;
      }
    }

    // start_time
    //
    if (n.name () == "start_time" && n.namespace_ ().empty ())
    {
      if (!start_time_.present ())
      {
        this->start_time_.set (start_time_traits::create (i, f, this));
        continue;
      }
    }

    // tend
    //
    if (n.name () == "tend" && n.namespace_ ().empty ())
    {
      if (!tend_.present ())
      {
        this->tend_.set (tend_traits::create (i, f, this));
        continue;
      }
    }

    // delta_t
    //
    if (n.name () == "delta_t" && n.namespace_ ().empty ())
    {
      if (!delta_t_.present ())
      {
        this->delta_t_.set (delta_t_traits::create (i, f, this));
        continue;
      }
    }

    // input_file
    //
    if (n.name () == "input_file" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< input_file_type > r (
        input_file_traits::create (i, f, this));

      if (!input_file_.present ())
      {
        this->input_file_.set (r);
        continue;
      }
    }

    // cuboid
    //
    if (n.name () == "cuboid" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< cuboid_type > r (
        cuboid_traits::create (i, f, this));

      this->cuboid_.push_back (r);
      continue;
    }

    break;
  }

  if (!base_output_file_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "base_output_file",
      "");
  }

  if (!frequency_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "frequency",
      "");
  }

  if (!start_time_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "start_time",
      "");
  }

  if (!tend_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "tend",
      "");
  }

  if (!delta_t_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "delta_t",
      "");
  }

  if (!input_file_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "input_file",
      "");
  }
}

input_t* input_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class input_t (*this, f, c);
}

input_t& input_t::
operator= (const input_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->base_output_file_ = x.base_output_file_;
    this->frequency_ = x.frequency_;
    this->start_time_ = x.start_time_;
    this->tend_ = x.tend_;
    this->delta_t_ = x.delta_t_;
    this->input_file_ = x.input_file_;
    this->cuboid_ = x.cuboid_;
  }

  return *this;
}

input_t::
~input_t ()
{
}

// cuboid
//

cuboid::
cuboid (const position_type& position,
        const number_type& number,
        const distance_type& distance,
        const mass_type& mass,
        const velocity_type& velocity)
: ::xml_schema::type (),
  position_ (position, this),
  number_ (number, this),
  distance_ (distance, this),
  mass_ (mass, this),
  velocity_ (velocity, this)
{
}

cuboid::
cuboid (::std::auto_ptr< position_type >& position,
        ::std::auto_ptr< number_type >& number,
        const distance_type& distance,
        const mass_type& mass,
        ::std::auto_ptr< velocity_type >& velocity)
: ::xml_schema::type (),
  position_ (position, this),
  number_ (number, this),
  distance_ (distance, this),
  mass_ (mass, this),
  velocity_ (velocity, this)
{
}

cuboid::
cuboid (const cuboid& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  position_ (x.position_, f, this),
  number_ (x.number_, f, this),
  distance_ (x.distance_, f, this),
  mass_ (x.mass_, f, this),
  velocity_ (x.velocity_, f, this)
{
}

cuboid::
cuboid (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  position_ (this),
  number_ (this),
  distance_ (this),
  mass_ (this),
  velocity_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void cuboid::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // position
    //
    if (n.name () == "position" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< position_type > r (
        position_traits::create (i, f, this));

      if (!position_.present ())
      {
        this->position_.set (r);
        continue;
      }
    }

    // number
    //
    if (n.name () == "number" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< number_type > r (
        number_traits::create (i, f, this));

      if (!number_.present ())
      {
        this->number_.set (r);
        continue;
      }
    }

    // distance
    //
    if (n.name () == "distance" && n.namespace_ ().empty ())
    {
      if (!distance_.present ())
      {
        this->distance_.set (distance_traits::create (i, f, this));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    // velocity
    //
    if (n.name () == "velocity" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< velocity_type > r (
        velocity_traits::create (i, f, this));

      if (!velocity_.present ())
      {
        this->velocity_.set (r);
        continue;
      }
    }

    break;
  }

  if (!position_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "position",
      "");
  }

  if (!number_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "number",
      "");
  }

  if (!distance_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "distance",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }

  if (!velocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velocity",
      "");
  }
}

cuboid* cuboid::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class cuboid (*this, f, c);
}

cuboid& cuboid::
operator= (const cuboid& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->position_ = x.position_;
    this->number_ = x.number_;
    this->distance_ = x.distance_;
    this->mass_ = x.mass_;
    this->velocity_ = x.velocity_;
  }

  return *this;
}

cuboid::
~cuboid ()
{
}

// vectorF
//

vectorF::
vectorF (const x_type& x,
         const y_type& y,
         const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

vectorF::
vectorF (const vectorF& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

vectorF::
vectorF (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void vectorF::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

vectorF* vectorF::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class vectorF (*this, f, c);
}

vectorF& vectorF::
operator= (const vectorF& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

vectorF::
~vectorF ()
{
}

// vectorI
//

vectorI::
vectorI (const x_type& x,
         const y_type& y,
         const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

vectorI::
vectorI (const vectorI& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

vectorI::
vectorI (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void vectorI::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

vectorI* vectorI::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class vectorI (*this, f, c);
}

vectorI& vectorI::
operator= (const vectorI& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

vectorI::
~vectorI ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::input_t >
input (const ::std::string& u,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::input_t > r (
    ::input (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::input_t >
input (const ::std::string& u,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::input_t > r (
    ::input (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::input_t >
input (const ::std::string& u,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::input_t > r (
    ::input (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::input_t >
input (::std::istream& is,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::input (isrc, f, p);
}

::std::auto_ptr< ::input_t >
input (::std::istream& is,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::input (isrc, h, f, p);
}

::std::auto_ptr< ::input_t >
input (::std::istream& is,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::input (isrc, h, f, p);
}

::std::auto_ptr< ::input_t >
input (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::input (isrc, f, p);
}

::std::auto_ptr< ::input_t >
input (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::input (isrc, h, f, p);
}

::std::auto_ptr< ::input_t >
input (::std::istream& is,
       const ::std::string& sid,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::input (isrc, h, f, p);
}

::std::auto_ptr< ::input_t >
input (::xercesc::InputSource& i,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::input_t > r (
    ::input (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::input_t >
input (::xercesc::InputSource& i,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::input_t > r (
    ::input (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::input_t >
input (::xercesc::InputSource& i,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::input_t > r (
    ::input (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::input_t >
input (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::input_t > r (
      ::input (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "input" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::input_t > r (
      ::xsd::cxx::tree::traits< ::input_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "input",
    "");
}

::std::auto_ptr< ::input_t >
input (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "input" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::input_t > r (
      ::xsd::cxx::tree::traits< ::input_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "input",
    "");
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsd/cxx/post.hxx>

